<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.test.junior.mapper.product.ProductMapper">

    <select id="findById" resultMap="productResultMapper">
        SELECT * FROM Product WHERE id = #{id}
    </select>

    <select id="insertProduct" resultMap="productResultMapper">
        INSERT INTO Product (name, price, description, user_id)
        VALUES (#{name}, #{price}, #{description}, #{userId})
        RETURNING *
    </select>

    <select id="updateProduct" resultMap="productResultMapper">
        UPDATE Product SET name = #{name}, price = #{price}, description = #{description}
        WHERE id = #{id}
        AND user_id = #{userId}
        RETURNING *
    </select>

    <select id="deleteProduct" resultMap="productResultMapper">
        DELETE FROM Product WHERE id = #{id} AND user_id = #{userId} RETURNING *
    </select>

    <select id="getLimitedProducts" resultMap="productResultMapper">
        SELECT * FROM Product LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="searchProductsByName" resultMap="productResultMapper">
        SELECT * FROM Product AS p
        WHERE LOWER(p.name) LIKE CONCAT('%', LOWER(#{name}), '%')
    </select>


    <insert id="likeOrDislikeProduct">
        INSERT INTO product_like (product_id, user_id, liked)
        VALUES (#{prodId}, #{userId}, #{liked})
        ON CONFLICT (product_id, user_id)
        DO UPDATE
        SET liked =
            CASE
                WHEN product_like.liked = #{liked} THEN NULL
                ELSE #{liked}
            END;
    </insert>

    <delete id="deleteNullLikes">
        DELETE FROM product_like
        WHERE liked IS NULL;
    </delete>



    <resultMap id="productResultMapper" type="com.java.test.junior.model.product.Product">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="price" column="price"/>
        <result property="description" column="description"/>
        <result property="userId" column="user_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>
</mapper>